# -----------------------
# VARIABLER och LISTOR
# -----------------------

import random

kortlek = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
           30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
           57, 58, 59, 60]

sakhög = []

alla_poäng = [0, 0, 0, 0]

# wincon = 0

player_1_intervals = [6, 12, 18, 24, 30, 36, 42, 48, 54, 60]
player_2_intervals = [6, 12, 18, 24, 30, 36, 42, 48, 54, 60]
player_3_intervals = [6, 12, 18, 24, 30, 36, 42, 48, 54, 60]
player_4_intervals = [6, 12, 18, 24, 30, 36, 42, 48, 54, 60]
player_intervals = [player_1_intervals, player_2_intervals, player_3_intervals, player_4_intervals]

player_1 = []
player_2 = []
player_3 = []
player_4 = []

alla_spelare = [player_1, player_2, player_3, player_4]

spelare_namn = input("Ange namn på alla spelare: ")
spelare_namn = spelare_namn.split(', ')

antal_spelare = len(spelare_namn)
aktiva_spelare = alla_spelare[:antal_spelare]
aktiva_poäng = alla_poäng[:antal_spelare]

gi_min = [1, 7, 13, 19, 25, 31, 37, 43, 49, 55]
gi_max = [6, 12, 18, 24, 30, 36, 42, 48, 54, 60]



alla_vinster = [0, 0, 0, 0]
aktiva_vinster = alla_vinster[:antal_spelare]

alla_racko = [0, 0, 0, 0]
aktiva_racko = alla_racko[:antal_spelare]



p1_bytt = 0
p2_bytt = 0
p3_bytt = 0
p4_bytt = 0

alla_byten = [p1_bytt, p2_bytt, p3_bytt, p4_bytt]
aktiva_byten = alla_byten[:antal_spelare]


# -------------------
# FUNKTIONER
# -------------------



def blanda_kort(hög):
    random.shuffle(hög)
    return hög

def blanda_kort_igen():
    behåll_kort = sakhög[-1]

    for x in sakhög:
        kortlek.append(x)

    sakhög.clear()

    blanda_kort(kortlek)
    sakhög.append(behåll_kort), kortlek.remove(behåll_kort)

    return kortlek and sakhög

def visa_kort(hand):
    for kort in hand:
        print(10 - hand.index(kort), ":", kort)



def kortutdelning(alla_spelare, lek, sakhög):
    blanda_kort(lek)
    for spelare in alla_spelare:
        for _ in range(10):
            kort = lek.pop(0)
            spelare.append(kort)
    sakhög.append(lek.pop(0))
    return alla_spelare

def nya_kortutdelning(spelare, lek, hög):
    for k in range(len(spelare)):
        spelare[k].clear()

    lek.clear()
    for i in range(1, 61):
        lek.append(i)

    hög.clear()
    return lek and hög



def poäng_bricka(spelare):
    poäng = 5
    for i in range(0, 9):
        if spelare[i] < spelare[i + 1]:
            poäng += 5
        elif spelare[i] > spelare[i + 1]:
            break
    return poäng

def Special_Racko(x):
    if x > 6:
        x = 6
    bonuspoäng = 50 * (2 ** (x - 3))
    return bonuspoäng

def Räkna_Poäng(aktiva_poäng, spelare, aktiva_spelare):
    for tur in range(len(aktiva_spelare)):
        # separat för spelaren som vann:
        poäng = aktiva_poäng[tur]
        if aktiva_spelare[tur] == spelare:
            poäng += 25
            count = 1
            consecutive_runs_list = []
            for i in range(9):
                if spelare[i + 1] == spelare[i] + 1:
                    count += 1
                else:
                    consecutive_runs_list.append(count)
                    count = 1
            highest_consecutive = max(consecutive_runs_list)
            if highest_consecutive >= 3:
                poäng += Special_Racko(highest_consecutive)
        poäng += poäng_bricka(aktiva_spelare[tur])
        aktiva_poäng[tur] = poäng



def spelrunda(spelare, kortlek, sakhög):
    # visa_kort(spelare)
    print(spelare)
    print("Sakhög:", sakhög[-1])

    val = (input("Ta upp? ja/nej: "))
    if val == "ja" or val == "Ja":
        byta = int(input("Byta (index): "))
        spelare.insert(byta - 1, sakhög.pop(-1))
        sakhög.append(spelare.pop(byta))
        print(spelare)
        print("\n\n")


    elif val == "nej" or val == "Nej":
        print("\n")
        print("Kortlek:", kortlek[0], " ", "Sakhög:", sakhög[-1])
        val = (input("Behålla ja/nej: "))

        if val == "ja" or val == "Ja":
            byta = int(input("Byta (index): "))
            spelare.insert(byta - 1, kortlek.pop(0))
            sakhög.append(spelare.pop(byta))
            print(spelare, "\n", "\n")
            print("")

        elif val == "nej" or val == "Nej":
            sakhög.append(kortlek.pop(0))
            print("")

    elif val == "vinn":
        spelare.sort()
        print("")


"""
def intervall_check(spelare, spelare_interval):
    i_max = spelare_interval
    i_min = intervall_min(spelare_interval)
    godkända_kort = []
    for k in range(10):
        if i_min[k] <= spelare[k] <= i_max[k]:
            godkända_kort.append(spelare[k])
        else:
            godkända_kort.append(False)
    return godkända_kort
"""
def intervall_check(spelare):
    godkända_kort = []
    for k in range(0, 10):
        if gi_min[k] <= spelare[k] <= gi_max[k]:
            godkända_kort.append(spelare[k])
        else:
            godkända_kort.append(False)

    return godkända_kort

def intervall_min(intervals):
    i_min = []
    i_min.append(1)
    for i in range(1, 10):
        i_min.append(intervals[i - 1] + 1)
    return i_min

def Adjust_Interval(approved_cards, intervals):
    approved_cards_stripped = []

    min_val = 1
    max_val = 60

    for approved_card in approved_cards:
        if approved_card != False:
            if approved_card == approved_cards[0]:
                min_val = approved_card
                intervals[0] = approved_card
            elif approved_card == approved_cards[-1]:
                max_val = approved_card

            approved_cards_stripped.append(approved_card)

    for card in approved_cards_stripped:
        intervals[approved_cards.index(card)] = card
        length = approved_cards.index(card)
        position = approved_cards.index(card)
        prev_card = approved_cards_stripped[approved_cards_stripped.index(card) - 1]
        prev_length = approved_cards.index(prev_card)

        if card == approved_cards_stripped[0]:
            for interval in range(1, position):
                range_val = card - min_val
                jump = int(round(range_val / length))
                intervals[interval] = (min_val - 1) + jump
                min_val += jump
                length -= 1
            min_val = card

        else:
            min_val = approved_cards[prev_length]
            for interval in range(position - prev_length - 1):
                range_val = card - min_val - 1
                jump = int(round(range_val / (length - prev_length - 1)))
                intervals[prev_length + 1 + interval] = min_val + jump
                min_val += jump + 1
                length -= 1

        if card == approved_cards_stripped[-1]:
            length = approved_cards.index(card)
            card = max_val
            intervals[-1] = card
            for interval in range(9 - position):
                range_val = card - min_val
                jump = int(round(range_val / (9 - length)))
                intervals[position + 1 + interval] = min_val + jump
                min_val += jump + 1
                length += 1

    return intervals




"""
def jarvis(godkända_kort, spelare):
    while True:
        # kollar för sakhögen
        if godkända_kort[0] == False and godkända_kort[1] == True and (sakhög[-1] <= spelare[1]):
            sakhög.append(spelare[0]), spelare.pop(0)
            spelare.insert(0, sakhög[-2])
            # print(sakhög[-2],1,"sakhög 1")
            return spelare

        elif godkända_kort[0] == False and (sakhög[-1] <= Adjust_Interval(intervall_check(spelare))[0]):
            sakhög.append(spelare[0]), spelare.pop(0)
            spelare.insert(0, sakhög[-2])
            # print(sakhög[-2],1,"sakhög 1.5")
            return spelare

        elif godkända_kort[9] == False and godkända_kort[8] == True and (spelare[8] < sakhög[-1]):
            sakhög.append(spelare[9]), spelare.pop(9)
            spelare.insert(9, sakhög[-2])
            # print(sakhög[-2],10,"sakhög 2")
            return spelare

        for j in range(1, 10):
            if godkända_kort[j] == False and (Adjust_Interval(intervall_check(spelare))[j - 1] < sakhög[-1] <=
                                              Adjust_Interval(intervall_check(spelare))[j]):
                sakhög.append(spelare[j]), spelare.pop(j)
                spelare.insert(j, sakhög[-2])
                # print(sakhög[-2],j+1,"sakhög 3")
                return spelare

        # kollar kortleken
        if godkända_kort[0] == False and godkända_kort[1] == True and (kortlek[0] <= spelare[1]):

            sakhög.append(spelare[0]), spelare.pop(0)
            spelare.insert(0, kortlek[0]), kortlek.pop(0)
            # print(spelare[0],1,"kortlek 1")
            return spelare

        elif godkända_kort[9] == False and godkända_kort[8] == True and (
                kortlek[0] <= Adjust_Interval(intervall_check(spelare))[0]):
            sakhög.append(spelare[0]), spelare.pop(0)
            spelare.insert(0, kortlek[0])
            # print(spelare[0],1,"kortlek 1.5")
            return spelare

        elif godkända_kort[9] == False and godkända_kort[8] == True and (spelare[8] <= kortlek[0]):
            sakhög.append(spelare[9]), spelare.pop(9)
            spelare.insert(9, kortlek[0]), kortlek.pop(0)
            # print(spelare[9],10,"kortlek 2")
            return spelare

        for k in range(1, 10):
            if godkända_kort[k] == False and (Adjust_Interval(intervall_check(spelare))[j - 1] < kortlek[0] <=
                                              Adjust_Interval(intervall_check(spelare))[j]):
                sakhög.append(spelare[k]), spelare.pop(k)
                spelare.insert(k, kortlek[0]), kortlek.pop(0)
                # print(spelare[k],k+1,"kortlek 3")
                return spelare

        # print("botten bytar ingen")
        sakhög.append(kortlek[0]), kortlek.pop(0)
        return spelare
"""

def gi(godkända_kort, spelare):
    swaps = aktiva_byten[tur]

    #kollar sakhögen
    # [0] < [1]
    if godkända_kort[0] == False and godkända_kort[1] != False and (sakhög[-1] < spelare[1]):
        godkända_kort.pop(0), godkända_kort.insert(0, sakhög[-1])
        sakhög.append(spelare[0]), spelare.pop(0)
        spelare.insert(0, sakhög[-2]), sakhög.pop(-2)
        #print(spelare[0],"1","sakhög 1")
        swaps += 1
        aktiva_byten[tur] = swaps
        return spelare 

    # [8] < [9]
    elif godkända_kort[9] == False and godkända_kort[8] != False and (sakhög[-1] > spelare[8]):
        godkända_kort.pop(9), godkända_kort.insert(9, sakhög[-1])
        sakhög.append(spelare[9]), spelare.pop(9)
        spelare.insert(9, sakhög[-2]), sakhög.pop(-2)
        #print(spelare[9],"10","sakhög 2")
        swaps += 1
        aktiva_byten[tur] = swaps
        return spelare

    for j in range(len(spelare)):
        if godkända_kort[j] == False and gi_min[j] <= sakhög[-1] <= gi_max[j]:
            sakhög.append(spelare[j]), spelare.pop(j)
            spelare.insert(j, sakhög[-2]), sakhög.pop(-2)
            #print(spelare[j],j+1,"sakhög 3")
            swaps += 1
            aktiva_byten[tur] = swaps
            return spelare
        
    #kollar kortleken
    # [0] < [1]
    if godkända_kort[0] == False and godkända_kort[1] != False and (kortlek[0] < spelare[1]):
        godkända_kort.pop(0), godkända_kort.insert(0, kortlek[0])
        sakhög.append(spelare[0]), spelare.pop(0)
        spelare.insert(0, kortlek[0]), kortlek.pop(0)
        #print(spelare[0],"1","kortlek 1")
        swaps += 1
        aktiva_byten[tur] = swaps
        return spelare 

    # [8] < [9]
    elif godkända_kort[9] == False and godkända_kort[8] != False and (kortlek[0] > spelare[8]):
        godkända_kort.pop(9), godkända_kort.insert(9, kortlek[0])
        sakhög.append(spelare[9]), spelare.pop(9)
        spelare.insert(9, kortlek[0]), kortlek.pop(0)
        #print(spelare[9],"10","kortlek 2")
        swaps += 1
        aktiva_byten[tur] = swaps
        return spelare
    
    for k in range(len(spelare)):
        if godkända_kort[k] == False and gi_min[k] <= kortlek[0] <= gi_max[k]:
            sakhög.append(spelare[k]), spelare.pop(k)
            spelare.insert(k, kortlek[0]), kortlek.pop(0)
            #print(spelare[k],k+1,"kortlek 3")
            swaps += 1
            aktiva_byten[tur] = swaps
            return spelare 

    #print("botten byter inget")
    sakhög.append(kortlek[0]), kortlek.pop(0)
    return spelare

def Petter(godkända_kort, spelare):
    j = 0
    swaps = aktiva_byten[tur]

    # om kortet är godkänt kan den gå vidare
    if godkända_kort[j]:
        j += 1

    # kollar sakhögen
    # [0] < [1]
    elif godkända_kort[0] == False and godkända_kort[1] != False and (sakhög[-1] < spelare[1]):
        godkända_kort.pop(0), godkända_kort.insert(0, sakhög[-1])
        sakhög.append(spelare[0]), spelare.pop(0)
        spelare.insert(0, sakhög[-2]), sakhög.pop(-2)
        #print(spelare[0],"1","sakhög 1")
        j += 1
        swaps += 1
        aktiva_byten[tur] = swaps
        return spelare 
    
    # resten av handen
    elif godkända_kort[j] == False and gi_min[j] <= sakhög[-1] <= gi_max[j]:
        sakhög.append(spelare[j]), spelare.pop(j)
        spelare.insert(j, sakhög[-2]), sakhög.pop(-2)
        #print(spelare[j],j+1,"sakhög 2")
        j += 1
        swaps += 1
        aktiva_byten[tur] = swaps
        return spelare


    # kollar kortleken
    # [0] < [1]
    elif godkända_kort[0] == False and godkända_kort[1] != False and (kortlek[0] < spelare[1]):
        godkända_kort.pop(0), godkända_kort.insert(0, kortlek[0])
        sakhög.append(spelare[0]), spelare.pop(0)
        spelare.insert(0, kortlek[0]), kortlek.pop(0)
        #print(spelare[0],"1","kortlek 1")
        j += 1
        swaps += 1
        aktiva_byten[tur] = swaps
        return spelare 
    
    # resten av handen
    elif godkända_kort[j] == False and gi_min[j] <= kortlek[0] <= gi_max[j]:
        sakhög.append(spelare[j]), spelare.pop(j)
        spelare.insert(j, kortlek[0]), kortlek.pop(0)
        #print(spelare[j],j+1,"kortlek 2")
        j += 1
        swaps += 1
        aktiva_byten[tur] = swaps
        return spelare

    #print("botten byter inget")
    sakhög.append(kortlek[0]), kortlek.pop(0)
    return spelare

def högen(godkända_kort, spelare):
    swaps = aktiva_byten[tur]

    # [0] < [1]    
    if godkända_kort[0] == False and godkända_kort[1] != False and (sakhög[-1] < spelare[1]):
        godkända_kort.pop(0), godkända_kort.insert(0, sakhög[-1])
        sakhög.append(spelare[0]), spelare.pop(0)
        spelare.insert(0, sakhög[-2]), sakhög.pop(-2)
        #print(spelare[0],"1","sakhög 1")
        swaps += 1
        aktiva_byten[tur] = swaps
        return spelare

    # [8] < [9]
    elif godkända_kort[9] == False and godkända_kort[8] != False and (sakhög[-1] > spelare[8]):
        godkända_kort.pop(9), godkända_kort.insert(9, sakhög[-1])
        sakhög.append(spelare[9]), spelare.pop(9)
        spelare.insert(9, sakhög[-2]), sakhög.pop(-2)
        #print(spelare[9],"10","sakhög 2")
        swaps += 1
        aktiva_byten[tur] = swaps
        return spelare

    for j in range(len(spelare)):
        if godkända_kort[j] == False and gi_min[j] <= sakhög[-1] <= gi_max[j]:
            sakhög.append(spelare[j]), spelare.pop(j)
            spelare.insert(j, sakhög[-2]), sakhög.pop(-2)
            #print(spelare[j],j+1,"sakhög 3")
            swaps += 1
            aktiva_byten[tur] = swaps
            return spelare

    #print("botten byter inget")
    sakhög.append(kortlek[0]), kortlek.pop(0)
    return spelare

def risk_it_for_the_biscuit(godkända_kort, spelare,min,max):
    # kollar för sakhögen
    for k in range(0, 9):
        if godkända_kort[k] != False and (godkända_kort[k] + 1) == sakhög[-1]:  # om sakhögen är en mer än det som finns på godkännt index
            sakhög.append(spelare[k + 1]), spelare.pop(k + 1)
            spelare.insert((k + 1), sakhög[-2]), sakhög.pop(-2)
            #print("en större sakhög", k + 1)
            return spelare

    for m in range(1, 10):
        if godkända_kort[m] != False and (godkända_kort[m] - 1) == sakhög[-1]:  # om sakhögen är en mindre än det som finns på godkännt index
            sakhög.append(spelare[m - 1]), spelare.pop(m - 1)
            spelare.insert((m - 1), sakhög[-2]), sakhög.pop(-2)
            #print("en mindre sakhög", m)
            return spelare

    # [0] < [1]
    if godkända_kort[0] == False and godkända_kort[1] == True and (sakhög[-1] < spelare[1]):
        sakhög.append(spelare[0]), spelare.pop(0)
        spelare.insert(0, sakhög[-2]), sakhög.pop(-2)
        #print(spelare[0], 1, "sakhög 1")
        return spelare

    # [8] < [9]
    elif godkända_kort[9] == False and godkända_kort[8] == True and (spelare[8] < sakhög[-1]):
        sakhög.append(spelare[9]), spelare.pop(9)
        spelare.insert(9, sakhög[-2]), sakhög.pop(-2)
        #print(spelare[9], 10, "sakhög 2")
        return spelare

    for j in range(len(spelare)):
        if godkända_kort[j] == False and min[j - 1] <= sakhög[-1] <= max[j]:
            sakhög.append(spelare[j]), spelare.pop(j)
            spelare.insert(j, sakhög[-2]), sakhög.pop(-2) 
            #print(spelare[j], j + 1, "sakhög 3")
            return spelare

    # kollar kortleken
    for k in range(0, 9):
        if godkända_kort[k] != False and (godkända_kort[k] + 1) == kortlek[0]:  # om korthögen är en mer än det som finns på godkännt index
            sakhög.append(spelare[k + 1]), spelare.pop(k + 1)
            spelare.insert((k + 1), kortlek[0]), kortlek.pop(0)
            #print("en större kortlek", k + 1)
            return spelare

    for k in range(1, 10):
        if godkända_kort[k] != False and (godkända_kort[k] - 1) == kortlek[0]:  # om kortleken är en mindre än det som finns på godkännt index
            sakhög.append(spelare[k - 1]), spelare.pop(k - 1)
            spelare.insert((k - 1), kortlek[0]), kortlek.pop(0)
            #print("en mindre kortlek", k)
            return spelare

    # [0] < [1]
    if godkända_kort[0] == False and godkända_kort[1] == True and (kortlek[0] < spelare[1]):
        sakhög.append(spelare[0]), spelare.pop(0)
        spelare.insert(0, kortlek[0]), kortlek.pop(0)
        #print(spelare[0], 1, "kortlek 1") 
        return spelare

    # [8] < [9]
    elif godkända_kort[9] == False and godkända_kort[8] == True and (spelare[8] < kortlek[0]):
        sakhög.append(spelare[9]), spelare.pop(9)
        spelare.insert(9, kortlek[0]), kortlek.pop(0)
        #print(spelare[9], 10, "kortlek 2")
        return spelare

    for k in range(len(spelare)):
        if godkända_kort[k] == False and min[k - 1] <= kortlek[0] <= max[k]:
            sakhög.append(spelare[k]), spelare.pop(k)
            spelare.insert(k, kortlek[0]), kortlek.pop(0)
            #print(spelare[k], k + 1, "kortlek 3")
            return spelare

    #print("botten byter inget")
    sakhög.append(kortlek[0]), kortlek.pop(0)
    return spelare



def consecutive(spelare):
    count = 1
    consecutive_runs_list = []

    for i in range(9):
        if spelare[i + 1] == spelare[i] + 1:
            count += 1
        else:
            consecutive_runs_list.append(count)
            count = 1

    highest_consecutive = max(consecutive_runs_list)

    return highest_consecutive

def poäng_check(spelare):
    for poäng in spelare:
        if poäng >= 500:
            return True

    return False

def racko_check(spelare):
    for x in spelare:
        if x == sorted(x):
            return True

    return False

def antal_vinster(aktiva_poäng):
    for tur in range(len(aktiva_spelare)):
        vinster = aktiva_vinster[tur]
        if aktiva_poäng[tur] >= 500:
            vinster += 1
            aktiva_vinster[tur] = vinster
            break

def antal_racko(spelare):
    for x in spelare:
        racko = aktiva_racko[tur]
        if x == sorted(x):
            racko += 1
            aktiva_racko[tur] = racko
            break


# -------------------
# SJÄLVA SPELET
# -------------------


aktiva_spelare = kortutdelning(aktiva_spelare, kortlek, sakhög)

for k in range(10):
    antal_omblandningar = 0
    rounds = 0
    omgång = 0

    print("\n--------------------------------------------------------\n")
    print(k + 1)

    if poäng_check(aktiva_poäng):
        for tur in range(len(aktiva_spelare)):
            aktiva_poäng[tur] = 0

    while not poäng_check(aktiva_poäng):

        while not racko_check(aktiva_spelare):
            for tur in range(len(aktiva_spelare)):
                rounds += 1

                #Adjust_Interval(intervall_check(aktiva_spelare[tur], player_intervals[tur]), player_intervals[tur])
                #print("\n",spelare_namn[tur])

                if len(kortlek) == 0:   #byta till 0 så fort inte kortlek[0] ska printas
                    blanda_kort_igen()
                    #print("\nkortleken blandas\n")
                    antal_omblandningar += 1

                #elif spelare_namn[tur] == "jarvis":
                    #jarvis(intervall_check(aktiva_spelare[tur]), aktiva_spelare[tur])

                elif spelare_namn[tur] == "gi":
                    #print(aktiva_spelare[tur],sakhög[-1],kortlek[0]," ",len(kortlek),len(sakhög),len(kortlek)+len(sakhög))
                    gi(intervall_check(aktiva_spelare[tur]),aktiva_spelare[tur])
                    #print(aktiva_spelare[tur],sakhög[-1],kortlek[0]," ",len(kortlek),len(sakhög),len(kortlek)+len(sakhög))

                elif spelare_namn[tur] == "petter":
                    #print(aktiva_spelare[tur],sakhög[-1],kortlek[0]," ",len(kortlek),len(sakhög),len(kortlek)+len(sakhög))
                    Petter(intervall_check(aktiva_spelare[tur]), aktiva_spelare[tur])
                    #print(aktiva_spelare[tur],sakhög[-1],kortlek[0]," ",len(kortlek),len(sakhög),len(kortlek)+len(sakhög))

                elif spelare_namn[tur] == "högen":
                    #print(aktiva_spelare[tur],sakhög[-1],kortlek[0]," ",len(kortlek),len(sakhög),len(kortlek)+len(sakhög)) 
                    högen(intervall_check(aktiva_spelare[tur]), aktiva_spelare[tur])
                    #print(aktiva_spelare[tur],sakhög[-1],kortlek[0]," ",len(kortlek),len(sakhög),len(kortlek)+len(sakhög))

                elif spelare_namn[tur] == "risk":
                    #print(aktiva_spelare[tur],sakhög[-1],kortlek[0]," ",len(kortlek),len(sakhög),len(kortlek)+len(sakhög))
                    risk_it_for_the_biscuit(intervall_check(aktiva_spelare[tur]),aktiva_spelare[tur],intervall_min(player_intervals[tur]),player_intervals[tur])
                    #print(aktiva_spelare[tur],sakhög[-1],kortlek[0]," ",len(kortlek),len(sakhög),len(kortlek)+len(sakhög))

                if aktiva_spelare[tur] == sorted(aktiva_spelare[tur]):
                    if spelare_namn[tur] == "risk" and consecutive(aktiva_spelare[tur]) >= 3:
                        Räkna_Poäng(aktiva_poäng, aktiva_spelare[tur], aktiva_spelare)
                        antal_racko(aktiva_spelare)
                        break
                    else:
                        pass
                    Räkna_Poäng(aktiva_poäng, aktiva_spelare[tur], aktiva_spelare)
                    antal_racko(aktiva_spelare)
                    break

        if racko_check(aktiva_spelare):
            nya_kortutdelning(aktiva_spelare, kortlek, sakhög)
            #print("ny kortutdelning")
            aktiva_spelare = kortutdelning(aktiva_spelare, kortlek, sakhög)
            omgång += 1


    # det man ser i terminalen
    antal_vinster(aktiva_poäng)
    for tur in range(len(aktiva_spelare)):
        print(f"{spelare_namn[tur]:<8} {aktiva_poäng[tur]:<8} {aktiva_vinster[tur]:<8} {aktiva_racko[tur]:<8} {aktiva_byten[tur]:<8}")

    print("\n", rounds // (antal_spelare * omgång), antal_omblandningar)
print("\n----------------------------------------------------------------------------------------\n")

print("spelet har avslutats och här är resultaten\n")
print(f"{"namn":<13} {"antal vinster":<18} {"antal rack-o":<16} {"antal kort som bytes ut":<18}")
for tur in range(len(aktiva_spelare)):
    print(f"{spelare_namn[tur]:<18} {aktiva_vinster[tur]:<18} {aktiva_racko[tur]:<21} {aktiva_byten[tur]:<18}")
print("\n----------------------------------------------------------------------------------------\n")